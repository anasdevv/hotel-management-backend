// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  password       String
  phoneNumber    String
  profilePicture String?
  country        String?
  role           String    @default("guest")
  createdAt      DateTime  @default(now())
  bookings       Booking[]
  reviews        Review[]
  isDeleted      Boolean   @default(false)
}

model Room {
  id           String    @id @default(uuid())
  title        String
  createdAt    DateTime  @default(now())
  maxCapacity  Int
  regularPrice Int
  discount     Int
  description  String
  roomImage    String
  features     Feature[]
  booking      Booking[]
  reviews      Review[]
  isDeleted    Boolean   @default(false)
}

model Feature {
  id          String  @id @default(uuid())
  featureName String
  room        Room?   @relation(fields: [roomId], references: [id])
  roomId      String?
}

model Booking {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  startDate    DateTime
  endDate      DateTime
  numNights    Int
  totalPrice   Int
  isDeleted    Boolean   @default(false)
  hasBreakfast Boolean
  status       String
  checkinDate  DateTime?
  checkoutDate DateTime?
  user         User?     @relation(fields: [userId], references: [id])
  userId       String?
  room         Room      @relation(fields: [roomId], references: [id])
  roomId       String
}

model FoodItem {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Int
  picture     String
  isDeleted   Boolean     @default(false)
  orders      OrderItem[]
}

model Order {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  items     OrderItem[]
}

model OrderItem {
  id         String    @id @default(uuid())
  quantity   Int
  // item
  order      Order?    @relation(fields: [orderId], references: [id])
  orderId    String?
  foodItem   FoodItem? @relation(fields: [foodItemId], references: [id])
  foodItemId String?
}

model Review {
  id      String  @id @default(uuid())
  comment String
  rating  Float
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?
  room    Room?   @relation(fields: [roomId], references: [id])
  roomId  String?
}
