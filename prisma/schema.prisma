// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  password       String
  phoneNumber    String
  profilePicture String?
  country        String?
  role           String    @default("guest")
  createdAt      DateTime  @default(now())
  bookings       Booking[]
  reviews        Review[]
}

model Room {
  id           String    @id @default(uuid())
  title        String
  createdAt    DateTime  @default(now())
  maxCapacity  Int
  regularPrice Int
  discount     Int
  description  String
  roomImage    String
  features     Feature[]
  Booking      Booking[]
  reviews      Review[]
}

model Feature {
  id          String  @id @default(uuid())
  featureName String
  Room        Room?   @relation(fields: [roomId], references: [id])
  roomId      String?
}

model Booking {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  startDate    DateTime
  endDate      DateTime
  numNights    Int
  totalPrice   Int
  status       String
  checkinDate  DateTime?
  checkoutDate DateTime?
  User         User?     @relation(fields: [userId], references: [id])
  userId       String?
  room         Room      @relation(fields: [roomId], references: [id])
  roomId       String
}

model FoodItem {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Int
  picture     String
  Order       Order[]
}

model Order {
  id           String      @id @default(uuid())
  foodItem     FoodItem    @relation(fields: [foodItemId], references: [id])
  foodItemId   String
  quantity     Int
  OrderItems   OrderItems? @relation(fields: [orderItemsId], references: [id])
  orderItemsId String?
}

model OrderItems {
  id     String  @id @default(uuid())
  orders Order[]
  // item
}

model Review {
  id      String  @id @default(uuid())
  comment String
  rating  Float
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
  Room    Room?   @relation(fields: [roomId], references: [id])
  roomId  String?
}
